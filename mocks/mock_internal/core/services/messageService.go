// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/services/messageService.go
//
// Generated by this command:
//
//	mockgen -source=../internal/core/services/messageService.go -destination=../mocks/mock_internal/core/services/messageService.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/loukaspe/jedi-team-challenge/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageServiceInterface is a mock of MessageServiceInterface interface.
type MockMessageServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceInterfaceMockRecorder
}

// MockMessageServiceInterfaceMockRecorder is the mock recorder for MockMessageServiceInterface.
type MockMessageServiceInterfaceMockRecorder struct {
	mock *MockMessageServiceInterface
}

// NewMockMessageServiceInterface creates a new mock instance.
func NewMockMessageServiceInterface(ctrl *gomock.Controller) *MockMessageServiceInterface {
	mock := &MockMessageServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMessageServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServiceInterface) EXPECT() *MockMessageServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockMessageServiceInterface) CreateMessage(arg0 context.Context, arg1 uuid.UUID, arg2 *domain.Message) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockMessageServiceInterfaceMockRecorder) CreateMessage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockMessageServiceInterface)(nil).CreateMessage), arg0, arg1, arg2)
}

// GetAnswerForMessage mocks base method.
func (m *MockMessageServiceInterface) GetAnswerForMessage(arg0 context.Context, arg1 uuid.UUID) (*domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswerForMessage", arg0, arg1)
	ret0, _ := ret[0].(*domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswerForMessage indicates an expected call of GetAnswerForMessage.
func (mr *MockMessageServiceInterfaceMockRecorder) GetAnswerForMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswerForMessage", reflect.TypeOf((*MockMessageServiceInterface)(nil).GetAnswerForMessage), arg0, arg1)
}
